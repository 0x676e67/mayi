//file:noinspection GroovyAssignabilityCheck
import java.nio.file.Files

//file:noinspection GroovyAssignabilityCheck

configurations.all() {
    Configuration configuration ->({
        // Directly fail to build when encountering a version conflict
        configuration.resolutionStrategy.failOnVersionConflict()
    })
}

// all project settings
allprojects {
    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }
    apply plugin: 'java'
    apply from: this.rootProject.file('gradle.properties')

    group = 'com.zf1976'
    version = 'latest'
    // Specify compilation version
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }
}

// Specify compilation version
subprojects {
     repositories {
         mavenLocal()
         maven {
             url = "https://maven.aliyun.com/nexus/content/groups/public/"
         }
         mavenCentral()
     }
     dependencies {
         implementation "com.google.guava:guava:${guavaVersion}"
         implementation "org.mapstruct:mapstruct:${mapstructVersion}"
         annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
     }
}

task resolveDependencies {
    setDescription "Resolves all projects dependencies from the repository."
    setGroup "Build Server"

    doLast {
        rootProject.allprojects { project ->
            println ">> " + project
            Set<Configuration> configurations =
                    project.buildscript.configurations +
                            project.configurations
            configurations
                    .findAll { it.canBeResolved }
                    .forEach {
                        resolveDependencies(it)
                    }
        }
    }
}

def resolveDependencies(Configuration it) {
    try {
        Set<File> files = it.resolve()
        DependencySet set = it.allDependencies
        if (set.size() > 0) {
            println ">>> " + it
            println ">>>> Dependencies "
            set.forEach {
                println ">>>>> " +
                        it.group + ":" +
                        it.name + ":" +
                        it.version
            }
            println ">>>> Files"
            files.forEach {
                println ">>>>> " + it.canonicalPath
            }
        }
    } catch (e) {
        println ">>> " + it
        println ">>>> " + e.message
    }
}