server:
  port: 9000
  undertow:
  # 以下的配置会影响buffer,这些buffer会用于服务器连接的IO操作,有点类似netty的池化内存管理
  # 每块buffer的空间大小,越小的空间被利用越充分
    buffer-size: 1024
  # 是否分配的直接内存
    direct-buffers: true
    threads:
      # 设置IO线程数, 它主要执行非阻塞的任务,它们会负责多个连接, 默认设置每个CPU核心一个线程
      io: 4
      # 阻塞任务线程池, 当执行类似servlet请求阻塞操作, undertow会从这个线程池中取得线程,它的值设置取决于系统的负载
      worker: 20
#配置
spring:
  application:
    name: mayi-auth
  #json序列化配置
  jackson:
    time-zone: GMT+8
    default-property-inclusion: non_null
    date-format: yyyy-MM-dd HH:mm:ss
  servlet:
    multipart:
      enabled: true

#actuator监控
management:
  endpoints:
    enabled-by-default: true
    web:
      exposure:
        #暴露所有端点
        include: '*'
  # actuator端口独立，只允许内网使用
  server:
    port: 6666
  endpoint:
    health:
      #显示所有细节
      show-details: always
    info:
      enabled: true
  health:
    db:
      enabled: true

#公用线程池配置
executor:
  # 配置核心线程数
  core-pool-size: 8
  # 配置最大线程数
  max-pool-size: 16
  # 配置队列大小
  queue-capacity: 1000
  # 线程池名前缀
  name-prefix: Core-task-
  # 线程存活时间
  Keep-alive-seconds: 200
  # 线程组名
  thred-group-name: [ Auth-Group ]
  # bean名
  bean-name: AuthorizationServerTaskExecutor


# api接口加密
api-encrypt:
  open: true
  show-log: true

# 开启接口签名
auth:
  enable-signature: true
  model: false

feign:
  httpclient:
    connection-timeout: 50000
    connection-timer-repeat: 3000
  compression:
    response:
      useGzipDecoder: true